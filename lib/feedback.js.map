{
  "version": 3,
  "file": "feedback.js",
  "sourceRoot": "../",
  "sources": [
    "src/feedback.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "scoring = require('./scoring')\n\nfeedback =\n  default_feedback:\n    warning: ''\n    suggestions: [\n      \"Use a few words, avoid common phrases\"\n      \"No need for symbols, digits, or uppercase letters\"\n    ]\n\n  get_feedback: (score, sequence) ->\n    # starting feedback\n    return @default_feedback if sequence.length == 0\n\n    # no feedback if score is good or great.\n    return if score > 2\n      warning: ''\n      suggestions: []\n\n    # tie feedback to the longest match for longer sequences\n    longest_match = sequence[0]\n    for match in sequence[1..]\n      longest_match = match if match.token.length > longest_match.token.length\n    feedback = @get_match_feedback(longest_match, sequence.length == 1)\n    extra_feedback = 'Add another word or two. Uncommon words are better.'\n    if feedback?\n      feedback.suggestions.unshift extra_feedback\n      feedback.warning = '' unless feedback.warning?\n    else\n      feedback =\n        warning: ''\n        suggestions: [extra_feedback]\n    feedback\n\n  get_match_feedback: (match, is_sole_match) ->\n    switch match.pattern\n      when 'dictionary'\n        @get_dictionary_match_feedback match, is_sole_match\n\n      when 'spatial'\n        layout = match.graph.toUpperCase()\n        warning = if match.turns == 1\n          'Straight rows of keys are easy to guess'\n        else\n          'Short keyboard patterns are easy to guess'\n        warning: warning\n        suggestions: [\n          'Use a longer keyboard pattern with more turns'\n        ]\n\n      when 'repeat'\n        warning = if match.base_token.length == 1\n          'Repeats like \"aaa\" are easy to guess'\n        else\n          'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"'\n        warning: warning\n        suggestions: [\n          'Avoid repeated words and characters'\n        ]\n\n      when 'sequence'\n        warning: \"Sequences like abc or 6543 are easy to guess\"\n        suggestions: [\n          'Avoid sequences'\n        ]\n\n      when 'regex'\n        if match.regex_name == 'recent_year'\n          warning: \"Recent years are easy to guess\"\n          suggestions: [\n            'Avoid recent years'\n            'Avoid years that are associated with you'\n          ]\n\n      when 'date'\n        warning: \"Dates are often easy to guess\"\n        suggestions: [\n          'Avoid dates and years that are associated with you'\n        ]\n\n  get_dictionary_match_feedback: (match, is_sole_match) ->\n    warning = if match.dictionary_name == 'passwords'\n      if is_sole_match and not match.l33t and not match.reversed\n        if match.rank <= 10\n          'This is a top-10 common password'\n        else if match.rank <= 100\n          'This is a top-100 common password'\n        else\n          'This is a very common password'\n      else if match.guesses_log10 <= 4\n        'This is similar to a commonly used password'\n    else if match.dictionary_name == 'english_wikipedia'\n      if is_sole_match\n        'A word by itself is easy to guess'\n    else if match.dictionary_name in ['surnames', 'male_names', 'female_names']\n      if is_sole_match\n        'Names and surnames by themselves are easy to guess'\n      else\n        'Common names and surnames are easy to guess'\n    else\n      ''\n\n    suggestions = []\n    word = match.token\n    if word.match(scoring.START_UPPER)\n      suggestions.push \"Capitalization doesn't help very much\"\n    else if word.match(scoring.ALL_UPPER) and word.toLowerCase() != word\n      suggestions.push \"All-uppercase is almost as easy to guess as all-lowercase\"\n\n    if match.reversed and match.token.length >= 4\n      suggestions.push \"Reversed words aren't much harder to guess\"\n    if match.l33t\n      suggestions.push \"Predictable substitutions like '@' instead of 'a' don't help very much\"\n\n    result =\n      warning: warning\n      suggestions: suggestions\n    result\n\nmodule.exports = feedback\n"
  ]
}