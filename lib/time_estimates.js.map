{
  "version": 3,
  "file": "time_estimates.js",
  "sourceRoot": "../",
  "sources": [
    "src/time_estimates.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "time_estimates =\n  estimate_attack_times: (guesses) ->\n    crack_times_seconds =\n      online_throttling_100_per_hour: guesses / (100 / 3600)\n      online_no_throttling_10_per_second: guesses / 10\n      offline_slow_hashing_1e4_per_second: guesses / 1e4\n      offline_fast_hashing_1e10_per_second: guesses / 1e10\n\n    crack_times_display = {}\n    for scenario, seconds of crack_times_seconds\n      crack_times_display[scenario] = @display_time seconds\n\n    crack_times_seconds: crack_times_seconds\n    crack_times_display: crack_times_display\n    score: @guesses_to_score guesses\n\n\n  guesses_to_score: (guesses) ->\n    DELTA = 5\n    if guesses < 1e3 + DELTA\n      # risky password: \"too guessable\"\n      0\n    else if guesses < 1e6 + DELTA\n      # modest protection from throttled online attacks: \"very guessable\"\n      1\n    else if guesses < 1e8 + DELTA\n      # modest protection from unthrottled online attacks: \"somewhat guessable\"\n      2\n    else if guesses < 1e10 + DELTA\n      # modest protection from offline attacks: \"safely unguessable\"\n      # assuming a salted, slow hash function like bcrypt, scrypt, PBKDF2, argon, etc\n      3\n    else\n      # strong protection from offline attacks under same scenario: \"very unguessable\"\n      4\n\n  display_time: (seconds) ->\n    minute = 60\n    hour = minute * 60\n    day = hour * 24\n    month = day * 31\n    year = month * 12\n    century = year * 100\n    [display_num, display_str] = if seconds < 1\n      [null, 'less than a second']\n    else if seconds < minute\n      base = Math.round seconds\n      [base, \"#{base} second\"]\n    else if seconds < hour\n      base = Math.round seconds / minute\n      [base, \"#{base} minute\"]\n    else if seconds < day\n      base = Math.round seconds / hour\n      [base, \"#{base} hour\"]\n    else if seconds < month\n      base = Math.round seconds / day\n      [base, \"#{base} day\"]\n    else if seconds < year\n      base = Math.round seconds / month\n      [base, \"#{base} month\"]\n    else if seconds < century\n      base = Math.round seconds / year\n      [base, \"#{base} year\"]\n    else\n      [null, 'centuries']\n    display_str += 's' if display_num? and display_num != 1\n    display_str\n\nmodule.exports = time_estimates\n"
  ]
}